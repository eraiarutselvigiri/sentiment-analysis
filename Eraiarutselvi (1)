{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":239192,"sourceType":"datasetVersion","datasetId":100982}],"dockerImageVersionId":30919,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false},"colab":{"provenance":[{"file_id":"https://storage.googleapis.com/kaggle-colab-exported-notebooks/eraiarutselvieraia/twitter-hate-speech-96-accuracy.4712f795-c01d-4531-8500-9c4c4f3818de.ipynb?X-Goog-Algorithm=GOOG4-RSA-SHA256&X-Goog-Credential=gcp-kaggle-com%40kaggle-161607.iam.gserviceaccount.com/20250514/auto/storage/goog4_request&X-Goog-Date=20250514T153746Z&X-Goog-Expires=259200&X-Goog-SignedHeaders=host&X-Goog-Signature=6af3bda07a7f41aaa8da631cf84c9c937c9cba2104468749df594c63d194f0ae8d82c239288742db1fc2e2a9cec7f6949f16f644f77c149de564c070439089bf73192fdf89b6825054592bbc8ebcfc54ad31eee7445145b5ea3b259a6d498d0790db2c4ce52072c512c9c8fdd72d3d01cd3b108055114522f6852b68f3b6d2ec4ec824eebdaeb9736c3d92376125ac393b320704c0f96aebfb70d1a1dab73ff9c05b9aba7294e1b08c28b6614dc85f6f670f0efbc6a0db2ca10a637ef06d8d959c9e92b2075fdcf0756a5d361fa0eeab897ec5135f50db9713469bbcc24c5b624f936507f31e77349e2d6836535edb95d7f8328a4357a5bc7ebeee0b16f9a55f","timestamp":1747237264203}]}},"nbformat_minor":0,"nbformat":4,"cells":[{"source":["# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,\n","# THEN FEEL FREE TO DELETE THIS CELL.\n","# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON\n","# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR\n","# NOTEBOOK.\n","import kagglehub\n","arkhoshghalb_twitter_sentiment_analysis_hatred_speech_path = kagglehub.dataset_download('arkhoshghalb/twitter-sentiment-analysis-hatred-speech')\n","\n","print('Data source import complete.')"],"metadata":{"id":"sNZQdjH0cerH","executionInfo":{"status":"ok","timestamp":1747237130208,"user_tz":-330,"elapsed":7438,"user":{"displayName":"","userId":""}},"outputId":"bc1e161e-9820-48a6-887b-4d56010b8c75","colab":{"base_uri":"https://localhost:8080/"}},"cell_type":"code","outputs":[{"output_type":"stream","name":"stdout","text":["Data source import complete.\n"]}],"execution_count":null},{"cell_type":"markdown","source":["![](https://viterbischool.usc.edu/wp-content/uploads/2020/07/hate-1200x600-1.jpg)\n","\n","<span style=\"color: white; background-color: red; padding: 7px 15px; border-radius: 8px; font-size: 30px; font-weight: bold;\">HateSpeech Slayer: AI With a Zero-Tolerance Policy ⚔️</span>\n","\n","\n"],"metadata":{"id":"c_WY5NMKcerS"}},{"cell_type":"markdown","source":["# Youtube Video Link -->>> https://youtu.be/dipnq2uCtr8"],"metadata":{"id":"mLmXewzHcerX"}},{"cell_type":"markdown","source":["# Step 1: Load Necessary Libraries"],"metadata":{"id":"-4tWcnzMcerY"}},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import re\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import nltk\n","from nltk.corpus import stopwords\n","from sklearn.model_selection import train_test_split\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import BaggingClassifier\n","from xgboost import XGBClassifier\n","from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier, BaggingClassifier, StackingClassifier\n","from lightgbm import LGBMClassifier\n","from catboost import CatBoostClassifier\n","from sklearn.naive_bayes import MultinomialNB\n","from sklearn.metrics import accuracy_score, classification_report, confusion_matrix\n","from imblearn.over_sampling import SMOTE\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\")"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:21:10.346626Z","iopub.execute_input":"2025-02-28T12:21:10.347055Z","iopub.status.idle":"2025-02-28T12:21:10.354187Z","shell.execute_reply.started":"2025-02-28T12:21:10.347027Z","shell.execute_reply":"2025-02-28T12:21:10.352812Z"},"id":"YaB2GZYrcera","executionInfo":{"status":"error","timestamp":1747237159476,"user_tz":-330,"elapsed":20746,"user":{"displayName":"","userId":""}},"outputId":"3576d0cc-1557-4f12-aec2-7ebe8b7c1f4f","colab":{"base_uri":"https://localhost:8080/","height":680}},"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"No module named 'catboost'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-2e15595a47a5>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensemble\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mRandomForestClassifier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mAdaBoostClassifier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBaggingClassifier\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mStackingClassifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mlightgbm\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mLGBMClassifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mcatboost\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mCatBoostClassifier\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnaive_bayes\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mMultinomialNB\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmetrics\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mclassification_report\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconfusion_matrix\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'catboost'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"],"errorDetails":{"actions":[{"action":"open_url","actionText":"Open Examples","url":"/notebooks/snippets/importing_libraries.ipynb"}]}}],"execution_count":null},{"cell_type":"markdown","source":["# Step 2: Load and Explore Data"],"metadata":{"id":"i_n9gW6wcerb"}},{"cell_type":"code","source":["train_df = pd.read_csv('/kaggle/input/twitter-sentiment-analysis-hatred-speech/train.csv')"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:22:55.722766Z","iopub.execute_input":"2025-02-28T12:22:55.723266Z","iopub.status.idle":"2025-02-28T12:22:55.88649Z","shell.execute_reply.started":"2025-02-28T12:22:55.723232Z","shell.execute_reply":"2025-02-28T12:22:55.885217Z"},"id":"dVaxMsDXcerd"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["train_df.head()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:23:19.147324Z","iopub.execute_input":"2025-02-28T12:23:19.147723Z","iopub.status.idle":"2025-02-28T12:23:19.17713Z","shell.execute_reply.started":"2025-02-28T12:23:19.147697Z","shell.execute_reply":"2025-02-28T12:23:19.175824Z"},"id":"xyR2hzFFcerf","executionInfo":{"status":"ok","timestamp":1747237175168,"user_tz":-330,"elapsed":295,"user":{"displayName":"","userId":""}},"outputId":"a2f80cae-43f1-40e7-ebf1-a4ad063e4c04","colab":{"base_uri":"https://localhost:8080/","height":275}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   id  label                                              tweet\n","0   1      0   @user when a father is dysfunctional and is s...\n","1   2      0  @user @user thanks for #lyft credit i can't us...\n","2   3      0                                bihday your majesty\n","3   4      0  #model   i love u take with u all the time in ...\n","4   5      0             factsguide: society now    #motivation"],"text/html":["\n","  <div id=\"df-6c24aaa5-8d52-421f-9743-961e499814d8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>label</th>\n","      <th>tweet</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>@user when a father is dysfunctional and is s...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>@user @user thanks for #lyft credit i can't us...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>bihday your majesty</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>#model   i love u take with u all the time in ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>factsguide: society now    #motivation</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c24aaa5-8d52-421f-9743-961e499814d8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6c24aaa5-8d52-421f-9743-961e499814d8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6c24aaa5-8d52-421f-9743-961e499814d8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-b910be96-25a7-4d7a-9203-37bfbb089636\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b910be96-25a7-4d7a-9203-37bfbb089636')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-b910be96-25a7-4d7a-9203-37bfbb089636 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_df","summary":"{\n  \"name\": \"train_df\",\n  \"rows\": 31962,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9226,\n        \"min\": 1,\n        \"max\": 31962,\n        \"num_unique_values\": 31962,\n        \"samples\": [\n          12228,\n          14710,\n          19320\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tweet\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29530,\n        \"samples\": [\n          \"\\\"even if you like #windows 10, you should be   at #microsoft\\\" #computer #spam #spyware #unreliable #os #ms #win \",\n          \"the countdown begins! 10 hours till the musical! \\u00f0\\u009f\\u0098\\u008a\\u00f0\\u009f\\u0098\\u0084\\u00f0\\u009f\\u0098\\u0085 #itsthefinalcountdown #youngcarers #rctcbc #rctcouncil #rct #carersweek   \\u00f0\\u009f\\u0098\\u0081\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":4}],"execution_count":null},{"cell_type":"code","source":["train_df.info()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:23:50.481243Z","iopub.execute_input":"2025-02-28T12:23:50.481606Z","iopub.status.idle":"2025-02-28T12:23:50.512564Z","shell.execute_reply.started":"2025-02-28T12:23:50.481578Z","shell.execute_reply":"2025-02-28T12:23:50.511307Z"},"id":"HLTf21eYcerh","executionInfo":{"status":"ok","timestamp":1747237177513,"user_tz":-330,"elapsed":69,"user":{"displayName":"","userId":""}},"outputId":"a5d7e838-6955-458d-ed75-2eb8fc406788","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 31962 entries, 0 to 31961\n","Data columns (total 3 columns):\n"," #   Column  Non-Null Count  Dtype \n","---  ------  --------------  ----- \n"," 0   id      31962 non-null  int64 \n"," 1   label   31962 non-null  int64 \n"," 2   tweet   31962 non-null  object\n","dtypes: int64(2), object(1)\n","memory usage: 749.2+ KB\n"]}],"execution_count":null},{"cell_type":"code","source":["# Checking for null values\n","train_df.isnull().sum()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:24:30.388449Z","iopub.execute_input":"2025-02-28T12:24:30.388901Z","iopub.status.idle":"2025-02-28T12:24:30.401234Z","shell.execute_reply.started":"2025-02-28T12:24:30.388843Z","shell.execute_reply":"2025-02-28T12:24:30.399918Z"},"id":"GFhffIO7cerj","executionInfo":{"status":"ok","timestamp":1747237179651,"user_tz":-330,"elapsed":40,"user":{"displayName":"","userId":""}},"outputId":"b6229ce3-60cf-409d-f4c7-2951a388890d","colab":{"base_uri":"https://localhost:8080/","height":178}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["id       0\n","label    0\n","tweet    0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>id</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>label</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>tweet</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":6}],"execution_count":null},{"cell_type":"code","source":["# Plot sentiment distribution\n","sns.countplot(x='label', data=train_df, color='red')\n","plt.title('Distribution of Sentiments')\n","plt.show()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:24:34.453424Z","iopub.execute_input":"2025-02-28T12:24:34.453805Z","iopub.status.idle":"2025-02-28T12:24:34.710839Z","shell.execute_reply.started":"2025-02-28T12:24:34.453779Z","shell.execute_reply":"2025-02-28T12:24:34.709452Z"},"id":"Iz_naUiNcerk","executionInfo":{"status":"ok","timestamp":1747237183757,"user_tz":-330,"elapsed":831,"user":{"displayName":"","userId":""}},"outputId":"2bd685ec-3505-4a0f-edc4-e290ee30c8a6","colab":{"base_uri":"https://localhost:8080/","height":267}},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"execution_count":null},{"cell_type":"markdown","source":["# Step 3: Data Cleaning & Preprocessing\n"],"metadata":{"id":"1Q_3sZEZcerl"}},{"cell_type":"code","source":["nltk.download('stopwords')\n","stop_words = set(stopwords.words('english'))"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:26:08.689559Z","iopub.execute_input":"2025-02-28T12:26:08.689973Z","iopub.status.idle":"2025-02-28T12:26:08.826262Z","shell.execute_reply.started":"2025-02-28T12:26:08.689943Z","shell.execute_reply":"2025-02-28T12:26:08.824802Z"},"id":"FGuyZPpQcerm","executionInfo":{"status":"ok","timestamp":1747237187219,"user_tz":-330,"elapsed":195,"user":{"displayName":"","userId":""}},"outputId":"633b0982-507c-408f-b51c-4cbfd765e71c","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n"]}],"execution_count":null},{"cell_type":"code","source":["def clean_text(text):\n","    text = re.sub(r\"http\\S+|www\\S+|https\\S+\", '', text)  # Remove links\n","    text = re.sub(r'\\@\\w+|\\#','', text)  # Remove mentions and hashtags\n","    text = re.sub(r'[^\\w\\s]', '', text)  # Remove punctuation\n","    text = text.lower()  # Convert to lowercase\n","    text = ' '.join([word for word in text.split() if word not in stop_words])  # Remove stopwords\n","    return text"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:30:55.27566Z","iopub.execute_input":"2025-02-28T12:30:55.276116Z","iopub.status.idle":"2025-02-28T12:30:55.28319Z","shell.execute_reply.started":"2025-02-28T12:30:55.276083Z","shell.execute_reply":"2025-02-28T12:30:55.281555Z"},"id":"GkvUhvlacern"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["train_df['clean_text'] = train_df['tweet'].apply(clean_text)\n","train_df.head()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:30:59.761174Z","iopub.execute_input":"2025-02-28T12:30:59.761583Z","iopub.status.idle":"2025-02-28T12:31:00.188263Z","shell.execute_reply.started":"2025-02-28T12:30:59.761556Z","shell.execute_reply":"2025-02-28T12:31:00.186577Z"},"id":"qG9jf6N9cero","executionInfo":{"status":"ok","timestamp":1747237196269,"user_tz":-330,"elapsed":619,"user":{"displayName":"","userId":""}},"outputId":"48194825-b88e-4612-9766-cc72a864b014","colab":{"base_uri":"https://localhost:8080/","height":451}},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   id  label                                              tweet  \\\n","0   1      0   @user when a father is dysfunctional and is s...   \n","1   2      0  @user @user thanks for #lyft credit i can't us...   \n","2   3      0                                bihday your majesty   \n","3   4      0  #model   i love u take with u all the time in ...   \n","4   5      0             factsguide: society now    #motivation   \n","\n","                                          clean_text  \n","0  father dysfunctional selfish drags kids dysfun...  \n","1  thanks lyft credit cant use cause dont offer w...  \n","2                                     bihday majesty  \n","3              model love u take u time urð ðððð ððð  \n","4                      factsguide society motivation  "],"text/html":["\n","  <div id=\"df-f75955cb-8801-4c02-88c5-abef36fb3902\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>id</th>\n","      <th>label</th>\n","      <th>tweet</th>\n","      <th>clean_text</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>@user when a father is dysfunctional and is s...</td>\n","      <td>father dysfunctional selfish drags kids dysfun...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>@user @user thanks for #lyft credit i can't us...</td>\n","      <td>thanks lyft credit cant use cause dont offer w...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>bihday your majesty</td>\n","      <td>bihday majesty</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>#model   i love u take with u all the time in ...</td>\n","      <td>model love u take u time urð ðððð ððð</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>factsguide: society now    #motivation</td>\n","      <td>factsguide society motivation</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f75955cb-8801-4c02-88c5-abef36fb3902')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f75955cb-8801-4c02-88c5-abef36fb3902 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f75955cb-8801-4c02-88c5-abef36fb3902');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","    <div id=\"df-de90d884-d85c-493d-b66a-b4cb7a136ed2\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-de90d884-d85c-493d-b66a-b4cb7a136ed2')\"\n","                title=\"Suggest charts\"\n","                style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","      <script>\n","        async function quickchart(key) {\n","          const quickchartButtonEl =\n","            document.querySelector('#' + key + ' button');\n","          quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","          quickchartButtonEl.classList.add('colab-df-spinner');\n","          try {\n","            const charts = await google.colab.kernel.invokeFunction(\n","                'suggestCharts', [key], {});\n","          } catch (error) {\n","            console.error('Error during call to suggestCharts:', error);\n","          }\n","          quickchartButtonEl.classList.remove('colab-df-spinner');\n","          quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","        }\n","        (() => {\n","          let quickchartButtonEl =\n","            document.querySelector('#df-de90d884-d85c-493d-b66a-b4cb7a136ed2 button');\n","          quickchartButtonEl.style.display =\n","            google.colab.kernel.accessAllowed ? 'block' : 'none';\n","        })();\n","      </script>\n","    </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"train_df","summary":"{\n  \"name\": \"train_df\",\n  \"rows\": 31962,\n  \"fields\": [\n    {\n      \"column\": \"id\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 9226,\n        \"min\": 1,\n        \"max\": 31962,\n        \"num_unique_values\": 31962,\n        \"samples\": [\n          12228,\n          14710,\n          19320\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"label\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 0,\n        \"max\": 1,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          1,\n          0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"tweet\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 29530,\n        \"samples\": [\n          \"\\\"even if you like #windows 10, you should be   at #microsoft\\\" #computer #spam #spyware #unreliable #os #ms #win \",\n          \"the countdown begins! 10 hours till the musical! \\u00f0\\u009f\\u0098\\u008a\\u00f0\\u009f\\u0098\\u0084\\u00f0\\u009f\\u0098\\u0085 #itsthefinalcountdown #youngcarers #rctcbc #rctcouncil #rct #carersweek   \\u00f0\\u009f\\u0098\\u0081\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"clean_text\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 28464,\n        \"samples\": [\n          \"ill try finish tonight illustration painting original fun colourful\",\n          \"come work lovely pub\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}],"execution_count":null},{"cell_type":"markdown","source":["# Step 4: Convert Text into Features"],"metadata":{"id":"SofHYHaEcerp"}},{"cell_type":"code","source":["# Convert cleaned text into TF-IDF feature vectors with a maximum of 8000 features\n","vectorizer = TfidfVectorizer(max_features=8000)\n","X = vectorizer.fit_transform(train_df['clean_text'])\n","y = train_df['label']"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:32:52.217697Z","iopub.execute_input":"2025-02-28T12:32:52.218107Z","iopub.status.idle":"2025-02-28T12:32:52.824225Z","shell.execute_reply.started":"2025-02-28T12:32:52.218076Z","shell.execute_reply":"2025-02-28T12:32:52.822987Z"},"id":"t-RuqnNDcerp"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Step 5: Train-Test Split\n"],"metadata":{"id":"Q2-hd7LCcerq"}},{"cell_type":"code","source":["# Split the data into training and testing sets while maintaining label distribution\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:33:51.178117Z","iopub.execute_input":"2025-02-28T12:33:51.178495Z","iopub.status.idle":"2025-02-28T12:33:51.202192Z","shell.execute_reply.started":"2025-02-28T12:33:51.178468Z","shell.execute_reply":"2025-02-28T12:33:51.200874Z"},"id":"idrPi8WDcerr"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Step 6: Apply SMOTE"],"metadata":{"id":"koisib1_cers"}},{"cell_type":"code","source":["# Display class distribution before applying SMOTE\n","print(\"Before SMOTE:\\n\", y_train.value_counts())"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:34:01.097636Z","iopub.execute_input":"2025-02-28T12:34:01.098039Z","iopub.status.idle":"2025-02-28T12:34:01.106428Z","shell.execute_reply.started":"2025-02-28T12:34:01.098011Z","shell.execute_reply":"2025-02-28T12:34:01.104933Z"},"id":"Ah3ulX1zcers","executionInfo":{"status":"ok","timestamp":1747237206924,"user_tz":-330,"elapsed":26,"user":{"displayName":"","userId":""}},"outputId":"fba83451-f273-491a-e76a-3994a63e9612","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["Before SMOTE:\n"," label\n","0    23775\n","1     1794\n","Name: count, dtype: int64\n"]}],"execution_count":null},{"cell_type":"code","source":["# Tomek Links (Cleaning the Majority Class)\n","# - It finds majority class samples (positive reviews) that are very close to minority ones and removes them.\n","# - This makes the boundary between classes clearer, so the model doesn’t get confused.\n","\n","# Why Use SMOTE + Tomek Instead of Just SMOTE?\n","# - SMOTE alone adds new minority samples but doesn’t clean the noise.\n","# - SMOTE + Tomek not only balances the data but also removes unnecessary majority samples,\n","#   making learning more efficient.\n","\n","from imblearn.combine import SMOTETomek\n","\n","smote_tomek = SMOTETomek(random_state=42)\n","X_train_smote, y_train_smote = smote_tomek.fit_resample(X_train, y_train)"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:37:13.166504Z","iopub.execute_input":"2025-02-28T12:37:13.167031Z","iopub.status.idle":"2025-02-28T12:38:49.060948Z","shell.execute_reply.started":"2025-02-28T12:37:13.166996Z","shell.execute_reply":"2025-02-28T12:38:49.059521Z"},"id":"LQlF5idEcert"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["# Display class distribution after applying SMOTE\n","print(\"After SMOTE:\\n\", y_train_smote.value_counts())"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:38:56.073135Z","iopub.execute_input":"2025-02-28T12:38:56.073564Z","iopub.status.idle":"2025-02-28T12:38:56.081674Z","shell.execute_reply.started":"2025-02-28T12:38:56.073535Z","shell.execute_reply":"2025-02-28T12:38:56.080385Z"},"id":"HdCd5RXiceru","executionInfo":{"status":"ok","timestamp":1747237260709,"user_tz":-330,"elapsed":13,"user":{"displayName":"","userId":""}},"outputId":"2e63c649-e762-45d1-9a98-41c30f8b7366","colab":{"base_uri":"https://localhost:8080/"}},"outputs":[{"output_type":"stream","name":"stdout","text":["After SMOTE:\n"," label\n","0    23775\n","1    23775\n","Name: count, dtype: int64\n"]}],"execution_count":null},{"cell_type":"markdown","source":["# Step 7: Models Building"],"metadata":{"id":"smONycZicerv"}},{"cell_type":"markdown","source":["<span style=\"color: white; background-color: blue; padding: 10px 15px; border-radius: 4px; font-size: 22px; font-weight: bold;\">📌 Logistic Regression Model</span>"],"metadata":{"id":"PxhP0g6Scerv"}},{"cell_type":"code","source":["# Train a Logistic Regression model and evaluate its performance\n","log_model = LogisticRegression()\n","log_model.fit(X_train_smote, y_train_smote)\n","\n","# Make predictions on the test set\n","y_pred_log = log_model.predict(X_test)\n","\n","# Print accuracy and classification report\n","print(\"Logistic Regression Accuracy:\", accuracy_score(y_test, y_pred_log))\n","print(classification_report(y_test, y_pred_log))\n","\n","# Plot confusion matrix as a heatmap\n","sns.heatmap(confusion_matrix(y_test, y_pred_log), annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.show()\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:39:48.276779Z","iopub.execute_input":"2025-02-28T12:39:48.277196Z","iopub.status.idle":"2025-02-28T12:39:48.846097Z","shell.execute_reply.started":"2025-02-28T12:39:48.277167Z","shell.execute_reply":"2025-02-28T12:39:48.844965Z"},"id":"dzgTveqUcerw"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<span style=\"color: white; background-color: blue; padding: 10px 15px; border-radius: 4px; font-size: 22px; font-weight: bold;\">📌 Vector Machine (SVM) Model</span>"],"metadata":{"id":"bl5jIpDxcerw"}},{"cell_type":"code","source":["# Train an SVM model and evaluate its performance\n","svm_model = SVC()\n","svm_model.fit(X_train_smote, y_train_smote)\n","\n","# Make predictions on the test set\n","y_pred_svm = svm_model.predict(X_test)\n","\n","# Print accuracy and classification report\n","print(\"SVM Accuracy:\", accuracy_score(y_test, y_pred_svm))\n","print(classification_report(y_test, y_pred_svm))\n","\n","# Plot confusion matrix as a heatmap\n","sns.heatmap(confusion_matrix(y_test, y_pred_svm), annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.show()\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:39:51.89122Z","iopub.execute_input":"2025-02-28T12:39:51.891606Z","iopub.status.idle":"2025-02-28T12:43:35.5033Z","shell.execute_reply.started":"2025-02-28T12:39:51.891576Z","shell.execute_reply":"2025-02-28T12:43:35.501869Z"},"id":"w2azBOX7cerx"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<span style=\"color: white; background-color: blue; padding: 10px 15px; border-radius: 4px; font-size: 22px; font-weight: bold;\">📌 Random Forest Model</span>"],"metadata":{"id":"80d_yX45cerx"}},{"cell_type":"code","source":["# Train a Random Forest model and evaluate its performance\n","rf_model = RandomForestClassifier()\n","rf_model.fit(X_train_smote, y_train_smote)\n","\n","# Make predictions on the test set\n","y_pred_rf = rf_model.predict(X_test)\n","\n","# Print accuracy and classification report\n","print(\"Random Forest Accuracy:\", accuracy_score(y_test, y_pred_rf))\n","print(classification_report(y_test, y_pred_rf))\n","\n","# Plot confusion matrix as a heatmap\n","sns.heatmap(confusion_matrix(y_test, y_pred_rf), annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.show()\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:43:35.505227Z","iopub.execute_input":"2025-02-28T12:43:35.505699Z","iopub.status.idle":"2025-02-28T12:44:12.882106Z","shell.execute_reply.started":"2025-02-28T12:43:35.505655Z","shell.execute_reply":"2025-02-28T12:44:12.880649Z"},"id":"W8AZVq8Ncery"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<span style=\"color: white; background-color: blue; padding: 10px 15px; border-radius: 4px; font-size: 22px; font-weight: bold;\">📌 CatBoost Model</span>"],"metadata":{"id":"MiZOta1vcerz"}},{"cell_type":"code","source":["# Train a CatBoost model and evaluate its performance\n","cat_model = CatBoostClassifier(verbose=0)\n","cat_model.fit(X_train_smote, y_train_smote)\n","\n","# Make predictions on the test set\n","y_pred_cat = cat_model.predict(X_test)\n","\n","# Print accuracy and classification report\n","print(\"CatBoost Accuracy:\", accuracy_score(y_test, y_pred_cat))\n","print(classification_report(y_test, y_pred_cat))\n","\n","# Plot confusion matrix as a heatmap\n","sns.heatmap(confusion_matrix(y_test, y_pred_cat), annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.show()\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:44:12.8851Z","iopub.execute_input":"2025-02-28T12:44:12.885467Z","iopub.status.idle":"2025-02-28T12:46:47.29375Z","shell.execute_reply.started":"2025-02-28T12:44:12.88544Z","shell.execute_reply":"2025-02-28T12:46:47.291103Z"},"id":"dYKrm-uncerz"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<span style=\"color: white; background-color: blue; padding: 10px 15px; border-radius: 4px; font-size: 22px; font-weight: bold;\">📌 Naïve Bayes Model</span>"],"metadata":{"id":"U0DiIRyXcer0"}},{"cell_type":"code","source":["# Train a Naïve Bayes model and evaluate its performance\n","nb_model = MultinomialNB()\n","nb_model.fit(X_train_smote, y_train_smote)\n","\n","# Make predictions on the test set\n","y_pred_nb = nb_model.predict(X_test)\n","\n","# Print accuracy and classification report\n","print(\"Naïve Bayes Accuracy:\", accuracy_score(y_test, y_pred_nb))\n","print(classification_report(y_test, y_pred_nb))\n","\n","# Plot confusion matrix as a heatmap\n","sns.heatmap(confusion_matrix(y_test, y_pred_nb), annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.show()\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:46:47.297185Z","iopub.execute_input":"2025-02-28T12:46:47.297843Z","iopub.status.idle":"2025-02-28T12:46:47.525628Z","shell.execute_reply.started":"2025-02-28T12:46:47.297796Z","shell.execute_reply":"2025-02-28T12:46:47.524322Z"},"id":"J-551hh8cer0"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<span style=\"color: white; background-color: blue; padding: 10px 15px; border-radius: 4px; font-size: 22px; font-weight: bold;\">📌 Bagging Classifier Model</span>"],"metadata":{"id":"MlKZw-jIcer1"}},{"cell_type":"code","source":["# Train a Bagging Classifier using Decision Trees as base estimators and evaluate its performance\n","bagging_model = BaggingClassifier(base_estimator=DecisionTreeClassifier(), n_estimators=10)\n","bagging_model.fit(X_train_smote, y_train_smote)\n","\n","# Make predictions on the test set\n","y_pred_bagging = bagging_model.predict(X_test)\n","\n","# Print accuracy and classification report\n","print(\"Bagging Classifier Accuracy:\", accuracy_score(y_test, y_pred_bagging))\n","print(classification_report(y_test, y_pred_bagging))\n","\n","# Plot confusion matrix as a heatmap\n","sns.heatmap(confusion_matrix(y_test, y_pred_bagging), annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.show()\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:46:47.527203Z","iopub.execute_input":"2025-02-28T12:46:47.527544Z","iopub.status.idle":"2025-02-28T12:47:37.550287Z","shell.execute_reply.started":"2025-02-28T12:46:47.527501Z","shell.execute_reply":"2025-02-28T12:47:37.548739Z"},"id":"cA83ADUqcer1"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["<span style=\"color: white; background-color: blue; padding: 10px 15px; border-radius: 4px; font-size: 22px; font-weight: bold;\">📌 Stacking Classifier Model</span>"],"metadata":{"id":"dRjvXTzZcer2"}},{"cell_type":"code","source":["# Train a Stacking Classifier with Random Forest and XGBoost as base models and Logistic Regression as the final estimator\n","stacking_model = StackingClassifier(\n","    estimators=[\n","        (\"rf\", RandomForestClassifier()),\n","        (\"xgb\", XGBClassifier())\n","    ],\n","    final_estimator=LogisticRegression()\n",")\n","\n","# Train the stacking model\n","stacking_model.fit(X_train_smote, y_train_smote)\n","\n","# Make predictions on the test set\n","y_pred_stacking = stacking_model.predict(X_test)\n","\n","# Print accuracy and classification report\n","print(\"Stacking Classifier Accuracy:\", accuracy_score(y_test, y_pred_stacking))\n","print(classification_report(y_test, y_pred_stacking))\n","\n","# Plot confusion matrix as a heatmap\n","sns.heatmap(confusion_matrix(y_test, y_pred_stacking), annot=True, fmt=\"d\", cmap=\"Blues\")\n","plt.show()\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:47:37.551764Z","iopub.execute_input":"2025-02-28T12:47:37.552624Z","iopub.status.idle":"2025-02-28T12:51:54.417707Z","shell.execute_reply.started":"2025-02-28T12:47:37.552554Z","shell.execute_reply":"2025-02-28T12:51:54.416406Z"},"id":"8P_1rcOfcer3"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Final Step: Model Comparison\n"],"metadata":{"id":"R6tOk3XPcer3"}},{"cell_type":"code","source":["# Store model names and their corresponding accuracy scores for comparison\n","models = [\"Logistic Regression\", \"SVM\", \"Random Forest\", \"CatBoost\", \"Naïve Bayes\", \"Bagging\", \"Stacking\"]\n","accuracies = [\n","    accuracy_score(y_test, y_pred_log),\n","    accuracy_score(y_test, y_pred_svm),\n","    accuracy_score(y_test, y_pred_rf),\n","    accuracy_score(y_test, y_pred_cat),\n","    accuracy_score(y_test, y_pred_nb),\n","    accuracy_score(y_test, y_pred_bagging),\n","    accuracy_score(y_test, y_pred_stacking)\n","]\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:56:11.961801Z","iopub.execute_input":"2025-02-28T12:56:11.962295Z","iopub.status.idle":"2025-02-28T12:56:11.979853Z","shell.execute_reply.started":"2025-02-28T12:56:11.962259Z","shell.execute_reply":"2025-02-28T12:56:11.97843Z"},"id":"e5Fuor-JcesC"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["plt.figure(figsize=(8, 4))\n","sns.barplot(y=models, x=accuracies, orient='h')\n","plt.xlabel(\"Accuracy\")\n","plt.title(\"Model Comparison\")\n","\n","for index, value in enumerate(accuracies):\n","    plt.text(value + 0.005, index, f\"{value:.3f}\")  # Adding labels\n","\n","plt.xlim(min(accuracies) - 0.02, max(accuracies) + 0.02)  # Adjust limits for visibility\n","plt.show()"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:56:22.091008Z","iopub.execute_input":"2025-02-28T12:56:22.091459Z","iopub.status.idle":"2025-02-28T12:56:22.320215Z","shell.execute_reply.started":"2025-02-28T12:56:22.091428Z","shell.execute_reply":"2025-02-28T12:56:22.318544Z"},"id":"mRiLJXKPcesD"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["plt.figure(figsize=(8, 4))\n","plt.plot(models, accuracies, marker='o', linestyle='-', color='r')\n","plt.ylabel(\"Accuracy\")\n","plt.title(\"Model Accuracy Comparison\")\n","plt.xticks(rotation=45, ha='right')\n","\n","for i, acc in enumerate(accuracies):\n","    plt.text(i, acc + 0.005, f\"{acc:.3f}\", ha='center')\n","\n","plt.ylim(min(accuracies) - 0.02, max(accuracies) + 0.02)  # Adjust y-axis range\n","plt.show()\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:56:24.618052Z","iopub.execute_input":"2025-02-28T12:56:24.618469Z","iopub.status.idle":"2025-02-28T12:56:24.868205Z","shell.execute_reply.started":"2025-02-28T12:56:24.61844Z","shell.execute_reply":"2025-02-28T12:56:24.866786Z"},"id":"K-NyWCRbcesE"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Try Your model"],"metadata":{"id":"rmC7SWsCcesF"}},{"cell_type":"code","source":["# Sample text to predict\n","test_text = \"i hate you\"\n","\n","# Preprocess the text\n","cleaned_text = clean_text(test_text)\n","\n","# Convert text into feature vector using the same vectorizer\n","z = vectorizer.transform([cleaned_text])\n","\n","# Predict using the trained stacking model\n","y_pred_stacking = stacking_model.predict(z)\n","\n","print(\"Prediction:\", y_pred_stacking)\n","\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T12:59:37.427798Z","iopub.execute_input":"2025-02-28T12:59:37.428296Z","iopub.status.idle":"2025-02-28T12:59:37.451477Z","shell.execute_reply.started":"2025-02-28T12:59:37.42826Z","shell.execute_reply":"2025-02-28T12:59:37.450476Z"},"id":"fNeZwPLocesG"},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":["# Saving The Trained Model and TF-IDF"],"metadata":{"id":"7VjSL7M-cesH"}},{"cell_type":"code","source":["import joblib\n","\n","# Save the trained SVM model and the vectorizer\n","#joblib.dump(svm_model, \"svm_model.pkl\")\n","joblib.dump(stacking_model, \"stacking_model.pkl\")\n","joblib.dump(vectorizer, \"tfidf_vectorizer.pkl\")\n"],"metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-02-28T13:00:06.107297Z","iopub.execute_input":"2025-02-28T13:00:06.107713Z","iopub.status.idle":"2025-02-28T13:00:06.643099Z","shell.execute_reply.started":"2025-02-28T13:00:06.107684Z","shell.execute_reply":"2025-02-28T13:00:06.641868Z"},"id":"AZXF5CPucesI"},"outputs":[],"execution_count":null},{"cell_type":"code","source":[],"metadata":{"trusted":true,"id":"qLpY3pC5cesJ"},"outputs":[],"execution_count":null},{"cell_type":"code","source":[],"metadata":{"trusted":true,"id":"Oy-Is3w-cesK"},"outputs":[],"execution_count":null},{"cell_type":"code","source":["\n"],"metadata":{"trusted":true,"id":"INi2wdGgcesK"},"outputs":[],"execution_count":null},{"cell_type":"code","source":[],"metadata":{"trusted":true,"id":"cOrSKODBcesL"},"outputs":[],"execution_count":null},{"cell_type":"code","source":[],"metadata":{"trusted":true,"id":"4hZGrz50cesL"},"outputs":[],"execution_count":null},{"cell_type":"code","source":[],"metadata":{"trusted":true,"id":"1aES7vgpcesM"},"outputs":[],"execution_count":null}]}